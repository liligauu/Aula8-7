#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

/*
Na tarde de ontem, 06 de dezembro, alguns servidores da Amazon (AWS) pararam de funcionar. Com isso, diversos serviços ficaram indisponíveis. Dentre eles, os servidores da Riot responsáveis pelos jogos League of Legends, Valorant e Wild Rift.
Você foi convocado em uma missão de emergência para ajudar a identificar os locais das falhas e gerar os relatórios para os técnicos responsáveis por reestabelecer os serviços.

Para isso, a central da Amazon está recebendo as notificações de falhas ao redor do mundo. Você devera implementar um sistema para salvar e processar essas notificações. Para isso:

a) (5 pontos) Aloque dinamicamente um vetor de Notificações de tamanho 5. Cada Notificação é uma estrutura que contém:
* Pais (string tam: 20):
* Cidade(string tam: 20):
* Quantidade de Servidores UP - ativos (inteiro)
* Quantidade de Servidores Down - com problemas (inteiro)

Os países possíveis são: Brasil, EUA, França, Inglaterra, China e Japão

b) (10 pontos) Receba os dados de diversas notificações de falhas e vá armazenando neste vetor de Notificações. A cada vez que o tamanho do vetor se tornar insuficiente, realoque seu tamanho aumentando o vetor em 5 unidades.
Ao receber o valor "fim" como entrada de um pais, o sistema de entradas deverá parar e o vetor tamanho do vetor ajustado ao tamanho exato da quantidade de relatórios.

c) (5 pontos) Salve os dados em um aquivo BINÁRIO chamado "notifications.dat". Feche o arquivo e libere a memória utilizada pelo vetor;

d) (5 pontos) Abra o arquivo gerado anteriormente, carregue os dados em um vetor de Relatórios alocado dinamicamente.

e) (5 pontos) Calcule o total de servidores ativos e com problemas em cada país. Exiba os dados na tela e gere um arquivo MODO TEXTO chamado "report.txt" no seguinte formato:
PAIS       |  UP |DOWN |  RATE|
Brasil     |   80|   30|   25%|
EUA        |  200|   50|   20%|
França     |   80|    5|    6%|
Inglaterra |  100|   12|   11%|
China      |  117|    3|    3%|
Japão      |   45|    5|   10%| 


Obs: Caso você tenha problemas com a alocação dinâmica, faça um vetor estático de tamanho 10 e prossiga nos códigos, você perderá os pontos dessa parte mas prosseguirá normalmente com a nota da parte de arquivos.

Dados de exemplo:


PAIS       |CIDADE      |UP  |DOWN |
EUA        |New York    | 100|   30|
Brasil     |Sao Paulo   |  50|   20|
Inglaterra |Londres     |  70|    8|
Brasil     |Brasilia    |  20|    5|
Brasil     |Fortaleza   |  10|    5|
Japão      |Tokyo       |  45|    5|
EUA        |Boston      |  25|    5|
EUA        |Los Angeles |  50|   10|
França     |Paris       |  50|    4|
China      |Pequim      | 117|    3|
França     |Nice        |  30|    1|
Londres    |Manchester  |  30|    4|
EUA        |Orlando     |  25|    5|
*/

typedef struct{
//    char pais[21];
    char cidade[21];
    int serverUP;
    int serverDOWN;
} Notificacoes;

void LeString(char string[], int tamanho){
    fgets(string, tamanho, stdin);
    string[strcspn(string, "\n")] = '\0';
    setbuf(stdin, NULL);
}

const char* NomeDoPais(int input){
    switch(input){
        case 1: return "Brasil";
        case 2: return "EUA";
        case 3: return "França";
        case 4: return "Inglaterra";
        case 5: return "China";
        case 6: return "Japão";
        default: return "Desconhecido";
    }
}

int main(){

    int tamanhodovetor = 5;
    int i = 0;
    int fim = 0;
    int *input = (int*) malloc (tamanhodovetor * sizeof(int));
    if(input == NULL){
        perror("Erro ao alocar memória!\n");
        exit(1);
    }
    Notificacoes *servidores = (Notificacoes*) malloc (tamanhodovetor * sizeof(Notificacoes));
    if(servidores == NULL){
        perror("Erro ao alocar memória!\n");
        exit(1);
    }

    do{
        printf("Escolha o país:\n");
        printf("1 - Brasil\n 2 - EUA\n 3 - França\n 4 - Inglaterra\n 5 - China\n 6 - Japão\n 0 - Encerrar programa\n");
        printf("Escolha: ");
        scanf("%i", &input[i]);
        if(input[i] == 0){
            printf("Programa encerrado!\n");
            if(i == 0){
                printf("Nenhum valor declarado!\n");
                free(servidores);
                break;
            }else{
                servidores = (Notificacoes*) realloc (servidores, i * sizeof(Notificacoes));
                if(servidores == NULL){
                    perror("Erro ao realocar memória!\n");
                    exit(1);
                }
                input = (int*) realloc (input, i * sizeof(Notificacoes));
                if(input == NULL){
                    perror("Erro ao realocar memória!\n");
                    exit(1);
                }
                printf("Tamanho do vetor realocado para %i\n", i);
                fim++;
                break;
            }
        }
        setbuf(stdin, NULL);
        if(input != 0){
            printf("Digite uma cidade do(a) %s: ", NomeDoPais(input[i]));
            LeString(servidores[i].cidade, 20);
            do{
                printf("Digite a quantidade de servidores ativos (%s/%s): ", servidores[i].cidade, NomeDoPais(input[i]));
                scanf("%i", &servidores[i].serverUP);   
            } while(servidores[i].serverUP < 0);
            do{
                printf("Digite a quantidade de servidores inativos (%s/%s): ", servidores[i].cidade, NomeDoPais(input[i]));
                scanf("%i", &servidores[i].serverDOWN);   
            } while(servidores[i].serverDOWN < 0);
            i++;
            if(i == tamanhodovetor){
                tamanhodovetor += 5;
                servidores = (Notificacoes*) realloc (servidores, tamanhodovetor * sizeof(Notificacoes));
                if(servidores == NULL){
                    perror("Erro ao realocar memória!\n");
                    exit(1);
                }
                input = (int*) realloc (input, i * sizeof(Notificacoes));
                if(input == NULL){
                    perror("Erro ao realocar memória!\n");
                    exit(1);
                }
                printf("Vetor realocado para %i\n", tamanhodovetor);
            }
        }
    } while(fim == 0);

/*
c) (5 pontos) Salve os dados em um aquivo BINÁRIO chamado "notifications.dat". Feche o arquivo e libere a memória utilizada pelo vetor;
*/
    FILE* arquivo = fopen("notifications.dat", "wb");
    if(arquivo == NULL){
        perror("Erro ao abrir arquivo!\n");
        exit(1);
    }

    fwrite(servidores, sizeof(Notificacoes), i, arquivo);
    free(servidores);
    fclose(arquivo);

/*
d) (5 pontos) Abra o arquivo gerado anteriormente, carregue os dados em um vetor de Relatórios alocado dinamicamente.
*/

    FILE* arquivo2 = fopen("notifications.dat", "rb");
    if(arquivo2 == NULL){
        perror("Erro ao abrir arquivo!\n");
        exit(1);
    }

    Notificacoes* relatorios = (Notificacoes*) malloc (i * sizeof(Notificacoes));
    if(relatorios == NULL){
        perror("Erro ao alocar memória!\n");
        exit(1);
    }

    fread(relatorios, sizeof(Notificacoes), 1, arquivo2);
    fclose(arquivo2);

/*
e) (5 pontos) Calcule o total de servidores ativos e com problemas em cada país. Exiba os dados na tela e gere um arquivo MODO TEXTO chamado "report.txt" no seguinte formato:
PAIS       |  UP |DOWN |  RATE|
Brasil     |   80|   30|   25%|
EUA        |  200|   50|   20%|
França     |   80|    5|    6%|
Inglaterra |  100|   12|   11%|
China      |  117|    3|    3%|
Japão      |   45|    5|   10%| 
*/

    FILE* arquivo3 = fopen("report.txt", "w");
    if(arquivo3 == NULL){
        perror("Erro ao abrir arquivo!\n");
        exit(1);
    }

    float serverUPpais[6] = {0};
    float serverDOWNpais[6] = {0};
    float serverRATE[6] = {0};

    for(int j = 0; j < i; j++){
        int paisIndex = input[j] - 1;
        serverUPpais[paisIndex] += relatorios[j].serverUP;
        serverDOWNpais[paisIndex] += relatorios[j].serverDOWN;
        serverRATE[paisIndex] = (serverDOWNpais[paisIndex]/(serverDOWNpais[paisIndex]+serverUPpais[paisIndex]))*100;
    }

    printf("Server UP TOTAL: \n");
    for(int j = 0; j < 6; j++){
        printf("%-20s: %.2f \n", NomeDoPais(j+1), serverUPpais[j]);
    }
    
    printf("Server DOWN TOTAL: \n");
    for(int j = 0; j < 6; j++){
        printf("%-20s: %.2f \n", NomeDoPais(j+1), serverDOWNpais[j]);
    }

    printf("Server RATE TOTAL: \n");
    for(int j = 0; j < 6; j++){
        printf("%-20s: %.2f \n", NomeDoPais(j+1), serverRATE[j]);
    }

    fprintf(arquivo3, "%-20s | %-4s | %-4s | %-4s\n", "PAIS", "UP", "DOWN", "RATE");
    for(int j = 0; j < 6; j++){
        if(j == 2 || j == 5){
            fprintf(arquivo3, "%-20s  | %-4.1f | %-4.1f | %-4.1f%%\n", NomeDoPais(j+1), serverUPpais[j], serverDOWNpais[j], serverRATE[j]);  
        }else{
            fprintf(arquivo3, "%-20s | %-4.1f | %-4.1f | %-4.1f%%\n", NomeDoPais(j+1), serverUPpais[j], serverDOWNpais[j], serverRATE[j]);
        }
    } // TABELA
    
    free(relatorios);
    fclose(arquivo3);

    return 0;
}
